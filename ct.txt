try {
            if (token != null && jwtTokenProvider.validateToken(token)) {
                Authentication auth = jwtTokenProvider.getAuthentication(token);
                SecurityContextHolder.getContext().setAuthentication(auth);
            }
        } catch (Exception e) {
            SecurityContextHolder.clearContext();
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
            return;
        }
// Đoạn này trong AuthTokenFilter.java (doFilterInternal)


package com.example.demo.controller;

import java.io.IOException;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.service.ImageService;

import io.swagger.v3.oas.annotations.Operation;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/image")
@CrossOrigin(origins = "*",maxAge = 3600)
@RequiredArgsConstructor
public class ImageController {

    @Autowired
    private final ImageService imageService;

    // @PostMapping("/upload-file")
    // @Operation(summary="Upload file lên database")
    // public ResponseEntity<?> uploadFile(@RequestParam("file") MultipartFile file) throws IOException{
    //     String data = imageService.uploadFile(file);
    //     return new ResponseEntity<>(data, HttpStatus.OK);w
    // }

    @PostMapping
    public ResponseEntity<?> uploadImage(@RequestParam("image")MultipartFile file){
        // Map data = this.imageService.upload(file);
        // return new ResponseEntity<>(data, HttpStatus.OK);
        return ResponseEntity.ok("ok");
    }
}


{
  "name": "Spiderman",
  "description": "Kể về một chàng trai bị nhện cắn",
  "publisher": "",
  "writer": "Amen",
  "artist": "",
  "genre": [
    "Action",
    "Drama",
    "Comedy"
  ]
}


import javax.persistence.Column;
import javax.persistence.Embeddable;

@Embeddable
public class ImageData {
    @Column(name = "url")
    private String url;

    @Column(name = "width")
    private int width;

    @Column(name = "height")
    private int height;

    // Constructor, getters, setters...
}

@Entity
@Table(name = "comic")
public class Comic {
    // Other fields...

    @Embedded
    private ImageData image;

    // Constructors, getters, setters...
}


@EqualsAndHashCode, Lombok sẽ tự động tạo các phương thức equals() và hashCode() dựa trên các trường (fields) của lớp. Cụ thể:

Phương thức equals() sẽ so sánh tất cả các trường của hai đối tượng và trả về true nếu tất cả các trường giống nhau.
Phương thức hashCode() sẽ sử dụng giá trị của các trường để tính toán mã băm (hash code) của đối tượng.


Comment cũng cần Id để xóa chứ ko ko có j để xóa cả